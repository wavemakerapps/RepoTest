/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.repotest.cities.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.repotest.cities.Zips;
import com.repotest.cities.ZipsId;


/**
 * ServiceImpl object for domain model class Zips.
 *
 * @see Zips
 */
@Service("Cities.ZipsService")
@Validated
public class ZipsServiceImpl implements ZipsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ZipsServiceImpl.class);


    @Autowired
    @Qualifier("Cities.ZipsDao")
    private WMGenericDao<Zips, ZipsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Zips, ZipsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CitiesTransactionManager")
    @Override
	public Zips create(Zips zips) {
        LOGGER.debug("Creating a new Zips with information: {}", zips);

        Zips zipsCreated = this.wmGenericDao.create(zips);
        return zipsCreated;
    }

	@Transactional(readOnly = true, value = "CitiesTransactionManager")
	@Override
	public Zips getById(ZipsId zipsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Zips by id: {}", zipsId);
        Zips zips = this.wmGenericDao.findById(zipsId);
        if (zips == null){
            LOGGER.debug("No Zips found with id: {}", zipsId);
            throw new EntityNotFoundException(String.valueOf(zipsId));
        }
        return zips;
    }

    @Transactional(readOnly = true, value = "CitiesTransactionManager")
	@Override
	public Zips findById(ZipsId zipsId) {
        LOGGER.debug("Finding Zips by id: {}", zipsId);
        return this.wmGenericDao.findById(zipsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "CitiesTransactionManager")
	@Override
	public Zips update(Zips zips) throws EntityNotFoundException {
        LOGGER.debug("Updating Zips with information: {}", zips);
        this.wmGenericDao.update(zips);

        ZipsId zipsId = new ZipsId();
        zipsId.setCity(zips.getCity());
        zipsId.setLat(zips.getLat());
        zipsId.setLng(zips.getLng());
        zipsId.setState(zips.getState());
        zipsId.setZip(zips.getZip());

        return this.wmGenericDao.findById(zipsId);
    }

    @Transactional(value = "CitiesTransactionManager")
	@Override
	public Zips delete(ZipsId zipsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Zips with id: {}", zipsId);
        Zips deleted = this.wmGenericDao.findById(zipsId);
        if (deleted == null) {
            LOGGER.debug("No Zips found with id: {}", zipsId);
            throw new EntityNotFoundException(String.valueOf(zipsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "CitiesTransactionManager")
	@Override
	public Page<Zips> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Zips");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CitiesTransactionManager")
    @Override
    public Page<Zips> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Zips");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CitiesTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Cities for table Zips to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "CitiesTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CitiesTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

